image: node:lts

cache:
  paths:
    - node_modules/.cache/
    - npm_cache/

before_script:
  - npm config set cache npm_cache/
  - npm ci
  - npm --no-git-tag-version version $(git describe)
  - npm rebuild node-sass

build:development:
  stage: build
  script:
    - npm run lint
    - npm run build-dev
  artifacts:
    paths:
      - dist/
  environment:
    name: development
  only:
    - master
    - ci

deploy:development:
  stage: deploy
  needs:
    - build:development
  script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - ssh -o "$SSH_PROXY_COMMAND" "$SSH_SERVER" 'rm --recursive /opt/tomcat/webapps/dev/*'
    - tar --create --verbose dist/ | ssh -o "$SSH_PROXY_COMMAND" "$SSH_SERVER" 'tar --directory=/opt/tomcat/webapps/dev --extract --strip-components=1'
  environment:
    name: development
  only:
    - master
    - ci

build:production:
  stage: build
  script:
    - npm run lint
    - npm run build-production
  artifacts:
    paths:
      - dist/
  environment:
    name: production
  only:
    - tags

deploy:production:
  stage: deploy
  needs:
    - build:production
  script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - ssh -o "$SSH_PROXY_COMMAND" "$SSH_SERVER" 'rm --recursive /opt/tomcat/webapps/ROOT/*'
    - tar --create --verbose dist/ | ssh -o "$SSH_PROXY_COMMAND" "$SSH_SERVER" 'tar --directory=/opt/tomcat/webapps/ROOT --extract --strip-components=1'
  environment:
    name: production
  only:
    - tags
  when: manual
